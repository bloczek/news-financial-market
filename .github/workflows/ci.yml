name: CI

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write
      checks: write  # Required for PR checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install

      - name: Run unit tests
        run: |
          poetry run pytest --disable-warnings

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk scan and report
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          snyk test \
            --all-projects \
            --severity-threshold=medium \
            --sarif-file-output=snyk.sarif || true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
          category: Snyk Security Scan
  
  code-quality:

    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: |
          pip install --user poetry
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          poetry --version    

      # - name: Install dependencies
      #   run: |
      #     pip install flake8 black mypy
          
      # - name: Run linting
      #   run: |
      #     flake8 .
      #     black . --check
      #     mypy .

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=./ --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

  release:
    needs: [security, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Python Semantic Release
        uses: relekang/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

          